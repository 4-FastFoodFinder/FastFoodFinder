package com.iceteaviet.fastfoodfinder.ui.loginimport android.content.Intentimport android.os.Bundleimport android.view.Viewimport android.widget.Toastimport com.facebook.*import com.facebook.login.LoginResultimport com.google.android.gms.auth.api.signin.GoogleSignInimport com.google.android.gms.auth.api.signin.GoogleSignInAccountimport com.google.android.gms.auth.api.signin.GoogleSignInClientimport com.google.android.gms.auth.api.signin.GoogleSignInOptionsimport com.google.android.gms.common.api.ApiExceptionimport com.google.android.gms.tasks.Taskimport com.google.firebase.auth.FacebookAuthProviderimport com.google.firebase.auth.GoogleAuthProviderimport com.iceteaviet.fastfoodfinder.Rimport com.iceteaviet.fastfoodfinder.data.remote.user.model.Userimport com.iceteaviet.fastfoodfinder.ui.base.BaseActivityimport com.iceteaviet.fastfoodfinder.ui.main.MainActivityimport com.iceteaviet.fastfoodfinder.utils.eimport io.reactivex.SingleObserverimport io.reactivex.disposables.Disposableimport io.reactivex.schedulers.Schedulersimport kotlinx.android.synthetic.main.activity_login.*class LoginActivity : BaseActivity(), View.OnClickListener {    private var mGoogleSignInClient: GoogleSignInClient? = null    private var mCallBackManager: CallbackManager? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        FacebookSdk.sdkInitialize(applicationContext)        // Initialize Firebase Auth        if (dataManager.isSignedIn()) {            // User is signed in            this.finish()            return        }        mGoogleSignInClient = setupGoogleSignIn()        mCallBackManager = setupFacebookSignIn()        setupEventHandlers()    }    override val layoutId: Int        get() = R.layout.activity_login    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (requestCode == RC_GOOGLE_SIGN_IN) { // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);            val task: Task<GoogleSignInAccount> = GoogleSignIn.getSignedInAccountFromIntent(data)            if (task.isSuccessful) {                // Google Sign In was successful, authenticate with Firebase                val account = task.getResult(ApiException::class.java)                if (account != null)                    signInWithGoogleAccount(account, false)                else                    e(TAG, "Login failed with google")            } else {                e(TAG, "Login failed with google")            }        } else {            // Pass the activity result back to the Facebook SDK            mCallBackManager!!.onActivityResult(requestCode, resultCode, data)        }    }    override fun onClick(v: View) {        when (v.id) {            R.id.btn_skip -> {                // Anonymous mode                startMainActivity()            }            R.id.btn_register -> {                val dlg = EmailRegisterDialog.newInstance()                dlg.setOnRegisterCompleteListener(object : EmailRegisterDialog.OnRegisterCompleteListener {                    override fun onSuccess(user: User) {                        dlg.dismiss()                        dataManager.getRemoteUserDataSource().insertOrUpdate(user)                        dataManager.setCurrentUser(user)                        startMainActivity()                    }                    override fun onError(e: Throwable) {                        e.printStackTrace()                    }                })                dlg.show(supportFragmentManager, "dialog-email-register")            }            R.id.btn_login -> {                val dlg = EmailLoginDialog.newInstance()                dlg.setOnLoginCompleteListener(object : EmailLoginDialog.OnLoginCompleteListener {                    override fun onSuccess(user: User) {                        dlg.dismiss()                        fetchCurrentUserAndStartMainActivity(user)                    }                    override fun onError(e: Throwable) {                        e.printStackTrace()                    }                })                dlg.show(supportFragmentManager, "dialog-email-login")            }            R.id.btn_google_signin -> {                onGoogleSignInButtonClicked(mGoogleSignInClient)            }        }    }    private fun setupEventHandlers() {        btn_skip.setOnClickListener(this)        btn_register.setOnClickListener(this)        btn_login.setOnClickListener(this)        btn_google_signin.setOnClickListener(this)    }    private fun setupFacebookSignIn(): CallbackManager {        val callbackManager = CallbackManager.Factory.create()        btn_facebook_signin.setReadPermissions("email", "public_profile")        btn_facebook_signin.registerCallback(callbackManager, object : FacebookCallback<LoginResult> {            override fun onSuccess(loginResult: LoginResult) {                signInWithFacebookAccessToken(loginResult.accessToken)            }            override fun onCancel() {            }            override fun onError(error: FacebookException) {            }        })        return callbackManager    }    private fun setupGoogleSignIn(): GoogleSignInClient {        // Configure sign-in to request the user's ID, email address, and basic        // profile. ID and basic profile are included in DEFAULT_SIGN_IN.        val client: GoogleSignInClient        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)                .requestIdToken(getString(R.string.default_web_client_id))                .requestEmail()                .build()        // Build a GoogleSignInClient with the options specified by gso.        client = GoogleSignIn.getClient(this, gso)        return client    }    private fun startMainActivity() {        val intent = Intent(this@LoginActivity, MainActivity::class.java)        startActivity(intent)        finish()    }    private fun onGoogleSignInButtonClicked(googleSignInClient: GoogleSignInClient?) {        // Check for existing Google Sign In account, if the user is already signed in        val account = GoogleSignIn.getLastSignedInAccount(this)        if (account != null) {            signInWithGoogleAccount(account, true)        } else {            val signInIntent = googleSignInClient?.signInIntent            startActivityForResult(signInIntent, RC_GOOGLE_SIGN_IN)        }    }    private fun signInWithGoogleAccount(acct: GoogleSignInAccount, fromLastSignIn: Boolean) {        val credential = GoogleAuthProvider.getCredential(acct.idToken, null)        dataManager.signInWithCredential(credential)                .subscribe(object : SingleObserver<User> {                    override fun onSubscribe(d: Disposable) {                    }                    override fun onSuccess(user: User) {                        Toast.makeText(this@LoginActivity, R.string.sign_in_successfully, Toast.LENGTH_SHORT).show()                        if (!fromLastSignIn) {                            dataManager.getRemoteUserDataSource().insertOrUpdate(user)                        }                        fetchCurrentUserAndStartMainActivity(user)                    }                    override fun onError(e: Throwable) {                        Toast.makeText(this@LoginActivity, R.string.authentication_failed,                                Toast.LENGTH_SHORT).show()                    }                })    }    // TODO: Check is new account    private fun signInWithFacebookAccessToken(token: AccessToken) {        val credential = FacebookAuthProvider.getCredential(token.token)        dataManager.signInWithCredential(credential)                .subscribe(object : SingleObserver<User> {                    override fun onSubscribe(d: Disposable) {                    }                    override fun onSuccess(user: User) {                        Toast.makeText(this@LoginActivity, R.string.sign_in_successfully, Toast.LENGTH_SHORT).show()                        dataManager.getRemoteUserDataSource().insertOrUpdate(user)                        dataManager.setCurrentUser(user)                        startMainActivity()                    }                    override fun onError(e: Throwable) {                        Toast.makeText(this@LoginActivity, R.string.authentication_failed,                                Toast.LENGTH_SHORT).show()                    }                })    }    private fun fetchCurrentUserAndStartMainActivity(user: User) {        dataManager.getRemoteUserDataSource().getUser(user.uid)                .subscribeOn(Schedulers.io())                .observeOn(Schedulers.io())                .subscribe(object : SingleObserver<User> {                    override fun onSubscribe(d: Disposable) {                    }                    override fun onSuccess(user: User) {                        dataManager.setCurrentUser(user)                        startMainActivity()                    }                    override fun onError(e: Throwable) {                        e.printStackTrace()                        dataManager.setCurrentUser(user)                        startMainActivity()                    }                })    }    companion object {        private val TAG = LoginActivity::class.java.simpleName        private const val RC_GOOGLE_SIGN_IN = 1    }}