package com.iceteaviet.fastfoodfinder.ui.loginimport android.content.Intentimport android.os.Bundleimport android.view.Viewimport android.widget.Toastimport com.facebook.CallbackManagerimport com.facebook.FacebookCallbackimport com.facebook.FacebookExceptionimport com.facebook.FacebookSdkimport com.facebook.login.LoginResultimport com.google.android.gms.auth.api.signin.GoogleSignInimport com.google.android.gms.auth.api.signin.GoogleSignInClientimport com.google.android.gms.auth.api.signin.GoogleSignInOptionsimport com.iceteaviet.fastfoodfinder.Appimport com.iceteaviet.fastfoodfinder.Rimport com.iceteaviet.fastfoodfinder.data.remote.user.model.Userimport com.iceteaviet.fastfoodfinder.ui.base.BaseActivityimport com.iceteaviet.fastfoodfinder.ui.login.emaillogin.EmailLoginDialogimport com.iceteaviet.fastfoodfinder.ui.login.emailregister.EmailRegisterDialogimport com.iceteaviet.fastfoodfinder.ui.main.MainActivityimport kotlinx.android.synthetic.main.activity_login.*class LoginActivity : BaseActivity(), LoginContract.View, View.OnClickListener {    override lateinit var presenter: LoginContract.Presenter    private var emailRegisterDialog: EmailRegisterDialog? = null    private var emailLoginDialog: EmailLoginDialog? = null    private var mGoogleSignInClient: GoogleSignInClient? = null    private var mCallBackManager: CallbackManager? = null    override val layoutId: Int        get() = R.layout.activity_login    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        presenter = LoginPresenter(App.getDataManager(), this)        setupUI()        FacebookSdk.sdkInitialize(applicationContext)        mCallBackManager = setupFacebookSignIn()        mGoogleSignInClient = setupGoogleSignIn()        setupEventHandlers()    }    override fun onResume() {        super.onResume()        presenter.subscribe()    }    override fun onPause() {        super.onPause()        presenter.unsubscribe()    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (data == null)            return        if (requestCode == RC_GOOGLE_SIGN_IN) {            // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);            presenter.onRequestGoogleAccountResult(data)        } else {            // Pass the activity result back to the Facebook SDK            mCallBackManager!!.onActivityResult(requestCode, resultCode, data)        }    }    override fun onClick(v: View) {        when (v.id) {            R.id.btn_skip -> {                // Anonymous mode                presenter.onSkipButtonClick()            }            R.id.btn_register -> {                emailRegisterDialog!!.show(supportFragmentManager, "dialog-email-register")            }            R.id.btn_login -> {                emailLoginDialog!!.show(supportFragmentManager, "dialog-email-login")            }            R.id.btn_google_signin -> {                onGoogleSignInButtonClicked(mGoogleSignInClient)            }        }    }    override fun exit() {        finish()    }    override fun showMainView() {        val intent = Intent(this@LoginActivity, MainActivity::class.java)        startActivity(intent)        finish()    }    override fun showSignInFailMessage() {        Toast.makeText(this@LoginActivity, R.string.authentication_failed, Toast.LENGTH_SHORT).show()    }    private fun setupUI() {        emailRegisterDialog = EmailRegisterDialog.newInstance()        emailLoginDialog = EmailLoginDialog.newInstance()    }    private fun setupEventHandlers() {        btn_skip.setOnClickListener(this)        btn_register.setOnClickListener(this)        btn_login.setOnClickListener(this)        btn_google_signin.setOnClickListener(this)        emailRegisterDialog!!.setOnRegisterCompleteListener(object : EmailRegisterDialog.OnRegisterCompleteListener {            override fun onSuccess(user: User, dialog: EmailRegisterDialog) {                dialog.dismiss()                presenter.onEmailRegisterSuccess(user)            }            override fun onError(e: Throwable) {                e.printStackTrace()            }        })        emailLoginDialog!!.setOnLoginCompleteListener(object : EmailLoginDialog.OnLoginCompleteListener {            override fun onSuccess(user: User, dialog: EmailLoginDialog) {                dialog.dismiss()                presenter.onLoginSuccess(user)            }            override fun onError(e: Throwable) {                e.printStackTrace()            }        })        btn_facebook_signin.registerCallback(mCallBackManager, object : FacebookCallback<LoginResult> {            override fun onSuccess(loginResult: LoginResult) {                presenter.onRequestFacebookAccountSuccess(loginResult.accessToken)            }            override fun onCancel() {            }            override fun onError(error: FacebookException) {                showSignInFailMessage()            }        })    }    private fun setupFacebookSignIn(): CallbackManager {        val callbackManager = CallbackManager.Factory.create()        btn_facebook_signin.setReadPermissions("email", "public_profile")        return callbackManager    }    private fun setupGoogleSignIn(): GoogleSignInClient {        // Configure sign-in to request the user's ID, email address, and basic        // profile. ID and basic profile are included in DEFAULT_SIGN_IN.        val client: GoogleSignInClient        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)                .requestIdToken(getString(R.string.default_web_client_id))                .requestEmail()                .build()        // Build a GoogleSignInClient with the options specified by gso.        client = GoogleSignIn.getClient(this, gso)        return client    }    private fun onGoogleSignInButtonClicked(googleSignInClient: GoogleSignInClient?) {        // Check for existing Google Sign In account, if the user is already signed in        val account = GoogleSignIn.getLastSignedInAccount(this)        if (account != null) {            presenter.onRequestGoogleAccountSuccess(account, true)        } else {            val signInIntent = googleSignInClient?.signInIntent            startActivityForResult(signInIntent, RC_GOOGLE_SIGN_IN)        }    }    companion object {        private val TAG = LoginActivity::class.java.simpleName        private const val RC_GOOGLE_SIGN_IN = 1    }}