apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android'
//apply plugin: "com.github.kt3k.coveralls"
apply from: '../app/coverage.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.iceteaviet.fastfoodfinder"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 13
        versionName "19.06.01"
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            testCoverageEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
        }
    }

    flavorDimensions "mock"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "mock"
            applicationIdSuffix = ".mock"
            //sourceSets.main.java.srcDirs = ['src/main/kotlin', 'src/mock/kotlin']
        }
        prod {
            //sourceSets.main.java.srcDirs = ['src/main/kotlin', 'src/prod/kotlin']
        }
    }

    aaptOptions {
        cruncherEnabled = false
    }

    sourceSets {
        main.java.srcDirs = ['src/main/kotlin']
        test.java.srcDirs = ['src/test/kotlin']
    }

    dexOptions {
        javaMaxHeapSize = "4g"
    }

    lintOptions {
        abortOnError false
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

def build_param = "${build}"
if (build_param == "devCI") {
    // Exclude all except mockDebug flavor
    android.variantFilter { variant ->
        if (variant.getFlavors().get(0).name != 'mock' && variant.buildType.name == 'debug') {
            variant.setIgnore(true)
        }
    }
} else if (build_param == "releaseCI") {
    // Exclude all except prodRelease flavor
    android.variantFilter { variant ->
        if (variant.getFlavors().get(0).name != 'prod' && variant.buildType.name == 'release') {
            variant.setIgnore(true)
        }
    }
} else {
    // Exclude mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

//coveralls {
//    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
//}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //// Testing dependencies
    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectricVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMockito"
    testImplementation("org.assertj:assertj-core:$rootProject.ext.assertJVersion")
    //testImplementation 'com.google.truth:truth:0.44' // Does not stable

    // Espresso UI Testing dependencies.
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.rulesVersion"

    implementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.ext.kotlinVersion"

    //// App dependencies
    // AndroidX
    implementation "androidx.multidex:multidex:$rootProject.multiDexVersion"
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha04'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Google Play Services
    implementation 'com.google.android.gms:play-services-maps:16.1.0'
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'com.google.maps.android:android-maps-utils:0.5'

    // Firebase
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.google.firebase:firebase-database:16.1.0'
    implementation 'com.google.firebase:firebase-auth:16.2.1'
    implementation 'com.google.firebase:firebase-perf:16.2.5'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.9'

    // UI
    implementation 'com.google.android.material:material:1.1.0-alpha05'
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation "de.hdodenhof:circleimageview:$rootProject.circleImageViewVersion"

    // REST api
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"

    // Code flow
    implementation "org.greenrobot:eventbus:$rootProject.eventBusVersion"

    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    // DB
    implementation "io.realm:realm-android-library:$rootProject.realmAndroidVersion"

    // FB SDK
    implementation "com.facebook.android:facebook-android-sdk:$rootProject.fbSdkVersion"

    // Logging
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"
}

kapt {
    generateStubs = true
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

apply plugin: 'com.google.gms.google-services'
